{"version":3,"sources":["components/layout/Navbar.js","components/coins/CoinBox.js","components/coins/Coin.js","App.js","index.js"],"names":["Navbar","className","this","props","icon","title","mobiletitle","Component","defaultProps","CoinBox","coin","name","image","price","dollarChange","percentChange","dollarVolume","lastUpdate","reviewURL","rank","dollarChangeStyle","backgroundColor","fontWeight","parseFloat","replace","percentChangeStyle","color","newDollarVolumeNum","Math","round","labelValue","newVolumeFormat","abs","Number","src","alt","style","href","target","rel","Coin","coins","isLoaded","map","key","indexOf","App","state","error","axios","get","then","response","data","Data","CoinInfo","Name","ImageUrl","DISPLAY","USD","PRICE","CHANGE24HOUR","CHANGEPCTDAY","VOLUMEDAYTO","LASTUPDATE","Url","setState","console","log","catch","sortPercentDesc","sort","a","b","sortPercentAsc","sortedDesc","sortedAsc","arr","item","onClick","sortDollarAsc","sortDollarDesc","sortPercentChangeAsc","sortPercentChangeDesc","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7eef975f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Navbar extends Component {\n  static defaultProps = {\n    title: 'Top 10 Cryptocurrencies by 24h Volume',\n    mobiletitle: 'Top 10 Crypto by Volume',\n    icon: 'fas fa-coins',\n  };\n\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    icon: PropTypes.string.isRequired,\n  };\n\n  render() {\n    return (\n      <nav className='navbar navbarStyle text-white'>\n        <h5 className='browsertitle'>\n          <i className={this.props.icon}></i>\n          {this.props.title}\n          <i className={this.props.icon}></i>\n        </h5>\n        <h5 className='mobiletitle'>\n        <i className={this.props.icon}></i>\n          {this.props.mobiletitle}\n          <i className={this.props.icon}></i>\n        </h5>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from 'react';\n\nconst CoinBox = ({\n  coin: {\n    name,\n    image,\n    price,\n    dollarChange,\n    percentChange,\n    dollarVolume,\n    lastUpdate,\n    reviewURL,\n  },\n  rank,\n}) => {\n  //Conditional Styling Dollar Change\n  let dollarChangeStyle = { backgroundColor: '#BCF5C2', fontWeight: 'bold' };\n\n  if (parseFloat(dollarChange.replace(/\\$/g, '')) < 0) {\n    dollarChangeStyle.backgroundColor = '#F5CDBC';\n  }\n\n  //Conditional Styling Percent Change\n  let percentChangeStyle = {\n    color: '#127900',\n    fontWeight: 'bold',\n  };\n\n  if (parseFloat(percentChange.replace(/\\$/g, '')) < 0) {\n    percentChangeStyle.color = '#FE0000';\n  }\n\n  // Format Dollar Volume from String to Millions or Thousands\n\n  // 1. Format string to number using regex\n  let newDollarVolumeNum = Math.round(\n    parseFloat(dollarVolume.replace(/\\$|,/g, ''))\n  );\n\n  // 2. Add M for millions or K for thousands to number\n  function formatVolume(labelValue) {\n    if (Math.abs(Number(labelValue)) >= 1.0e6) {\n      return Math.round(Math.abs(Number(labelValue)) / 1.0e6) + 'M';\n    } else if (Math.abs(Number(labelValue)) >= 1.0e3) {\n    }\n    return Math.round(Math.abs(Number(labelValue)) / 1.0e3) + 'K';\n  }\n\n  let newVolumeFormat = formatVolume(newDollarVolumeNum);\n\n  return (\n    <div className='container-fluid mb-2 mt-2 coinbg'>\n      {/* Desktop View */}\n      <div className='row desktopview'>\n        <div className='col text-white text-center border border-dark background pt-3 rounded-right rounded-left mr-1 ml-1'>\n          <div className='container'>\n            <div className='row'>\n              <div className='col-sm'>\n                <h4>{name}</h4>\n              </div>\n\n              <div className='col-sm'>\n                <img\n                  src={image}\n                  alt={name}\n                  className='w-50 mb-3 bg-white removeimage'\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className='col border border-dark rounded-left rounded-right text-center mr-1 ml-1'>\n          <br></br>\n          <p>{price}</p>\n        </div>\n        <div\n          className='col border border-dark text-center rounded-left rounded-right mr-1 ml-1'\n          style={dollarChangeStyle}\n        >\n          <br></br>\n          <p>{dollarChange}</p>\n        </div>\n        <div\n          className='col border border-dark text-center rounded-left rounded-right mr-1 ml-1'\n          style={percentChangeStyle}\n        >\n          <br></br>\n          <p> %{percentChange} </p>\n        </div>\n        <div className='col border border-dark text-center rounded-left rounded-right mr-1 ml-1'>\n          <br></br>\n          <p>${newVolumeFormat}</p>\n        </div>\n        <div className='col border border-dark text-center rounded-left rounded-right mr-1 ml-1'>\n          <br></br>\n          <p>\n            <a href={reviewURL} target='_blank' rel='noopener noreferrer'>\n              {lastUpdate}\n            </a>\n          </p>\n        </div>\n      </div>\n\n      {/* Card View */}\n\n      <div className='row d-flex justify-content-center'>\n        <div className='card w-75 justify-content-center rounded cardview'>\n          <div className='text-center pt-1 pb-0'>\n            <img className='card-img-top resizeimg' src={image} alt={name} />\n          </div>\n\n          <div className='card-body pt-1'>\n            <div className='card-title text-center text-white background'>\n              <h5>\n                #{rank}&nbsp;&nbsp;&nbsp;{name}\n              </h5>\n            </div>\n            <ul className='list-group list-group-flush text-center'>\n              <div className='icon-wrap'>\n                <li className='list-group-item'>P {price}</li>\n                <span className='icon-description p-2'>Price</span>\n              </div>\n              <div className='icon-wrap'>\n                <li className='list-group-item' style={dollarChangeStyle}>\n                  ∆{dollarChange}{' '}\n                </li>\n                <span className='icon-description p-2'>$ Change</span>\n              </div>\n              <div className='icon-wrap'>\n                <li className='list-group-item' style={percentChangeStyle}>\n                  ∆% {percentChange}\n                </li>\n                <span className='icon-description p-2'>% Change</span>\n              </div>\n              <div className='icon-wrap'>\n                <li className='list-group-item'>\n                  V<span className='volformat'>OL</span> ${newVolumeFormat}\n                </li>\n                <span className='icon-description p-2'>Price</span>\n              </div>\n              <div className='icon-wrap'>\n                <li className='list-group-item'>\n                  <a href={reviewURL} target='_blank' rel='noopener noreferrer'>\n                    {lastUpdate}\n                  </a>\n                </li>\n                <span className='icon-description p-2'>Last Updated</span>\n              </div>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CoinBox;\n","import React from 'react';\nimport CoinBox from './CoinBox';\nimport PropTypes from 'prop-types';\n\nconst Coin = ({ coins, isLoaded }) => {\n  if (isLoaded) {\n    return <p>Loading...</p>;\n  } else {\n    return (\n      <div>\n        <div className='titlebar container-fluid mb-2 mt-2 desktopview'>\n          <div className='row'>\n            <div className='col mr-1 ml-1'> </div>\n            <div className='col text-center border border-dark rounded-left rounded-right buttonbg text-white mr-1 ml-1'>\n              <span>Price</span>\n            </div>\n            <div className='col text-center border border-dark rounded-left rounded-right buttonbg text-white mr-1 ml-1'>\n              $ Change\n            </div>\n            <div className='col text-center border border-dark rounded-left rounded-right buttonbg text-white mr-1 ml-1'>\n              % Change\n            </div>\n            <div className='col text-center border border-dark rounded-left rounded-right buttonbg text-white mr-1 ml-1'>\n              $ Volume\n            </div>\n            <div className='col text-center border border-dark rounded-left rounded-right buttonbg text-white mr-1 ml-1'>\n              Update\n            </div>\n          </div>\n        </div>\n        <div className='grid'>\n          {coins.map((coin) => (\n            <CoinBox\n              key={coin.name}\n              coin={coin}\n              rank={coins.indexOf(coin) + 1}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n};\n\nCoin.propTypes = {\n  coins: PropTypes.array.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default Coin;\n","import React, { Component, Fragment } from 'react';\nimport Navbar from './components/layout/Navbar';\nimport Coin from './components/coins/Coin';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    coins: [],\n    isLoaded: false,\n    error: null,\n  };\n\n  componentDidMount() {\n    axios\n      .get(\n        'https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD'\n      )\n      .then((response) =>\n        response.data.Data.map((coin) => ({\n          name: `${coin.CoinInfo.Name}`,\n          image: `http://www.cryptocompare.com${coin.CoinInfo.ImageUrl}`,\n          price: `${coin.DISPLAY.USD.PRICE}`,\n          dollarChange: `${coin.DISPLAY.USD.CHANGE24HOUR}`,\n          percentChange: `${coin.DISPLAY.USD.CHANGEPCTDAY}`,\n          dollarVolume: `${coin.DISPLAY.USD.VOLUMEDAYTO}`,\n          lastUpdate: `${coin.DISPLAY.USD.LASTUPDATE}`,\n          reviewURL: `http://www.cryptocompare.com${coin.CoinInfo.Url}`,\n        }))\n      )\n\n      .then((coins) => {\n        this.setState({\n          coins,\n          isLoaded: false,\n        });\n        console.log(coins);\n      })\n      .catch((error) => this.setState({ error, isLoaded: false }));\n  }\n\n  // Sort Percentage Change Descending - Largest Gain at Top\n  sortPercentChangeDesc() {\n    const sortPercentDesc = [...this.state.coins].sort((a, b) => {\n      return (\n        parseFloat(b.percentChange.replace(/\\$/g, '')) -\n        parseFloat(a.percentChange.replace(/\\$/g, ''))\n      );\n    });\n    this.setState({ coins: sortPercentDesc });\n  }\n\n  // Sort Percentage Change Ascending - Largest Loss at Top\n  sortPercentChangeAsc() {\n    const sortPercentAsc = [...this.state.coins].sort((a, b) => {\n      return (\n        parseFloat(a.percentChange.replace(/\\$/g, '')) -\n        parseFloat(b.percentChange.replace(/\\$/g, ''))\n      );\n    });\n    this.setState({ coins: sortPercentAsc });\n  }\n\n  // Sort Dollar Change Descending - Largest Gain at Top\n  sortDollarDesc() {\n    const sortedDesc = [...this.state.coins].sort((a, b) => {\n      return (\n        parseFloat(b.dollarChange.replace(/\\$/g, '')) -\n        parseFloat(a.dollarChange.replace(/\\$/g, ''))\n      );\n    });\n    this.setState({ coins: sortedDesc });\n  }\n\n  // Sort Dollar Change Ascending - Largest Loss at Top\n  sortDollarAsc() {\n    const sortedAsc = [...this.state.coins].sort((a, b) => {\n      return (\n        parseFloat(a.dollarChange.replace(/\\$/g, '')) -\n        parseFloat(b.dollarChange.replace(/\\$/g, ''))\n      );\n    });\n    this.setState({ coins: sortedAsc });\n  }\n\n  getRank(arr, item) {\n    const rank = arr.indexOf(item) + 1;\n    return rank;\n  }\n\n  render() {\n    const { isLoaded, coins } = this.state;\n\n    return (\n      <Fragment>\n        <Navbar />\n        {/* Small Mobile View Buttons */}\n        <div className='text-center smallmobileview'>\n          <div className='btn-group btn-group-toggle ml-2 mt-2'>\n            <button\n              className='btn btn-outline-dark btn-rounded'\n              onClick={() => this.sortDollarAsc()}\n            >\n              $∆<i className='fas fa-arrow-up'></i>\n            </button>\n            <button\n              className='btn btn-outline-dark'\n              onClick={() => this.sortDollarDesc()}\n            >\n              $∆<i className='fas fa-arrow-down'></i>\n            </button>\n            <button\n              className='btn btn-outline-dark'\n              onClick={() => this.sortPercentChangeAsc()}\n            >\n              %∆<i className='fas fa-arrow-up'></i>\n            </button>\n            <button\n              className='btn btn-outline-dark'\n              onClick={() => this.sortPercentChangeDesc()}\n            >\n              %∆<i className='fas fa-arrow-down'></i>\n            </button>\n          </div>\n        </div>\n\n        {/*Mobile View Buttons*/}\n\n        <div className='text-center cardview end'>\n          <div className='btn-group btn-group-toggle ml-2 mt-2'>\n            <button\n              className='btn btn-outline-dark btn-rounded'\n              onClick={() => this.sortDollarAsc()}\n            >\n              $CHG<i className='fas fa-arrow-up'></i>\n            </button>\n            <button\n              className='btn btn-outline-dark'\n              onClick={() => this.sortDollarDesc()}\n            >\n              $CHG<i className='fas fa-arrow-down'></i>\n            </button>\n            <button\n              className='btn btn-outline-dark'\n              onClick={() => this.sortPercentChangeAsc()}\n            >\n              %CHG<i className='fas fa-arrow-up'></i>\n            </button>\n            <button\n              className='btn btn-outline-dark'\n              onClick={() => this.sortPercentChangeDesc()}\n            >\n              %CHG<i className='fas fa-arrow-down'></i>\n            </button>\n          </div>\n        </div>\n\n        {/* Desktop View Buttons*/}\n\n        <div className='btn-group btn-group-toggle ml-2 mt-2 desktopview'>\n          <button\n            className='btn btn-outline-dark btn-rounded'\n            onClick={() => this.sortDollarAsc()}\n          >\n            $CHG\n            <i className='fas fa-arrow-up'></i>\n          </button>\n          <button\n            className='btn btn-outline-dark'\n            onClick={() => this.sortDollarDesc()}\n          >\n            $CHG\n            <i className='fas fa-arrow-down'></i>\n          </button>\n          <button\n            className='btn btn-outline-dark'\n            onClick={() => this.sortPercentChangeAsc()}\n          >\n            %CHG\n            <i className='fas fa-arrow-up'></i>\n          </button>\n          <button\n            className='btn btn-outline-dark'\n            onClick={() => this.sortPercentChangeDesc()}\n          >\n            %CHG\n            <i className='fas fa-arrow-down'></i>\n          </button>\n        </div>\n\n        {/* Coinbox Cards Desktop + Mobile */}\n\n        <div className='container-fluid'>\n          <Coin isLoaded={isLoaded} coins={coins} />\n        </div>\n      </Fragment>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}